// <auto-generated/>
/*
The MIT License (MIT)

Copyright (c) 2022 Maksim Volkau

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

using System;
using System.Collections.Generic;

namespace DryIoc.CompileTime
{
    /// <summary>Interface of the compile-time container which will be called from the Container methods</summary>
    public interface ICompileTimeContainer
    {
        /// <summary>Try resolve a single composition root implementation</summary>
        void ResolveGenerated(ref object service, Type serviceType);

        /// <summary>Try resolve a single dynamic dependency implementation</summary>
        void ResolveGenerated(ref object service, Type serviceType, object serviceKey, Type requiredServiceType, Request preRequestParent, object[] args);

        /// <summary>Try resolve many service implementations</summary>
        IEnumerable<ResolveManyResult> ResolveManyGenerated(Type serviceType);
    }

    /// <summary>The implementation provides the means of adjusting the container rules</summary>
    public interface IConfigureRules
    {
        /// <summary>Configures the container.</summary>
        Rules Configure(Rules rules);
    }

    /// <summary>Factory Setup provider</summary>
    public interface ISetup
    {
        /// <summary>Provides the setup for the registration</summary>
        Setup Setup { get; }
    }

    /// <summary>Factory Made provider</summary>
    public interface IMade
    {
        /// <summary>Provides the made for the registration</summary>
        Made Made { get; }
    }

    /// <summary>Registration API attribute, equivalent to the `Register` methods</summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = false)]
    public class RegisterAttribute : Attribute
    {
        /// <summary>Service type of the registered service.</summary>
        public Type ServiceType { get; set; }

        /// <summary>Implementation type of the registered service.</summary>
        public Type ImplementationType { get; set; }

        /// <summary>Constructing attribute from the passed data</summary>
        public RegisterAttribute(Type serviceType, Type implementationType = null)
        {
            ServiceType = serviceType;
            ImplementationType = implementationType;
        }
    }

    /// <summary>Specify the type you would like to `Resolve` from the container, 
    /// comparing that to the dependency you want to inject into some other type.
    /// Usually those types are the roots of the program object graphs, e.g. App types, controllers, client request handlers</summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = false)]
    public class ResolutionRootAttribute : Attribute
    {
        /// <summary>Service type of the resolution root.</summary>
        public Type ServiceType { get; set; }

        /// <summary>Optional service key of the resolution root.</summary>
        public object ServiceKey { get; set; }

        /// <summary>Constructing attribute from the passed data</summary>
        public ResolutionRootAttribute(Type serviceType, object serviceKey = null)
        {
            ServiceType = serviceType;
            ServiceKey = serviceKey;
        }
    }

    /// <summary> Allows to select the resolution root type(s) from the provided registration.
    /// The resolution root is selected from the available registrations via the provided `IResolutionRootSelector` implementation type.
    /// For instance, for the provided open-generic registration of type `<![CDATA[IHandler<T>]]>` you may return service info of
    /// `<![CDATA[new[] { ServiceInfo.Of<IHandler<MyRequest>>(), ServiceInfo.Of<IHandler<string>>()}]]>`</summary>
    public interface IResolutionRootSelector
    {
        /// <summary>A selector method</summary>
        IEnumerable<ServiceInfo> GetResolutionRoots(ServiceRegistrationInfo registration);
    }

    /// <summary>Specify the type you would like to `Resolve` from the container, 
    /// comparing that to the dependency you want to inject into some other type.
    /// Usually those types are the roots of the program object graphs, e.g. App types, controllers, client request handlers
    /// The resolution root is selected from the available registrations via the provided `IResolutionRootSelector` implementation type.
    /// For instance, for the provided open-generic registration of type `<![CDATA[IHandler<T>]]>` you may return service info of
    /// `<![CDATA[new[] { ServiceInfo.Of<IHandler<MyRequest>>(), ServiceInfo.Of<IHandler<string>>()}]]>`</summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = false)]
    public class ResolutionRootSelectorAttribute : Attribute
    {
        /// <summary>The implementation of the `IResolutionRootSelector` that can be create via default/parameterless constructor, it may be a struct as well</summary>
        public Type IResolutionRootSelectorType { get; set; }

        /// <summary>Constructing attribute from the passed data</summary>
        public ResolutionRootSelectorAttribute(Type iResolutionRootSelectorType) => IResolutionRootSelectorType = iResolutionRootSelectorType;
    }
}